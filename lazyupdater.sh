#!/bin/bash
# This script updates the pkgver value in a PKGBUILD file.
# Usage: ./update_pkgver.sh <new_version>
# Copyright Â© 2025 Alessandro Bernardello
set -e
# ARG_OPTIONAL_SINGLE([config],[c],[path to config],[/etc/lazyupdater.conf])
# ARG_OPTIONAL_SINGLE([no-gum],[],[do not use gum even if detected],[false])
# ARG_OPTIONAL_SINGLE([no-hooks],[],[disable hook execution],[false])
# ARG_POSITIONAL_SINGLE([version],[version to write in the pkgbuild])
# ARG_HELP([An helper tool to update pkgbuilds.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_config="/etc/lazyupdater.conf"
_arg_no_gum="false"
_arg_no_hooks="false"


print_help()
{
	printf '%s\n' "An helper tool to update pkgbuilds."
	printf 'Usage: %s [-c|--config <arg>] [--no-gum <arg>] [--no-hooks <arg>] [-h|--help] <version>\n' "$0"
	printf '\t%s\n' "<version>: version to write in the pkgbuild"
	printf '\t%s\n' "-c, --config: path to config (default: '/etc/lazyupdater.conf')"
	printf '\t%s\n' "--no-gum: do not use gum even if detected (default: 'false')"
	printf '\t%s\n' "--no-hooks: disable hook execution (default: 'false')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			-c*)
				_arg_config="${_key##-c}"
				;;
			--no-gum)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_no_gum="$2"
				shift
				;;
			--no-gum=*)
				_arg_no_gum="${_key##--no-gum=}"
				;;
			--no-hooks)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_no_hooks="$2"
				shift
				;;
			--no-hooks=*)
				_arg_no_hooks="${_key##--no-hooks=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'version'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_version "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


#
main () {
if  "$#" -ne 1 ; then
  echo "Usage: $0 <new_version>"
  exit 1
fi

new_version="$1"

if  ! -f "PKGBUILD" ; then
  echo "Error: PKGBUILD file not found in the current directory."
  exit 1
fi

# update pkgver before sourcing
echo "Updating PKGBUILD"
sed -i "s/^\(pkgver=\).*/\1${new_version}/" PKGBUILD
updpkgsums
makepkg --printsrcinfo > .SRCINFO

# shellcheck disable=SC1091
source PKGBUILD

echo "Building package"
makepkg -f

# shellcheck disable=SC2154
# todo: use actual $ARCH instead of hardcoding
# todo: read package extension from makepkg.conf
sudo pacman -U "$pkgname"-"$pkgver"-"$pkgrel"-x86_64.pkg.tar.zst
}

main "$@"
# ] <-- needed because of Argbash
